use nlcd::nlcd::near_linear_cophenetic_distance::NearLinearCopheneticDistance;
use phylo::prelude::*;
use nlcd::nlcd::near_linear_cophenetic_distance::LcaMap;
use phylo::tree::DemoTree;
use rand::{thread_rng, seq::{SliceRandom, IteratorRandom}};
use rand::{distributions::Uniform, Rng}; // 0.6.5
use itertools::Itertools;
use fxhash::{FxHashMap as HashMap, FxHashSet as HashSet};

const NORM: u32 = 2;

fn main() {
    // Run registered benchmarks.
    divan::main();
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_nlcd_full_even(bencher: divan::Bencher, n_taxa: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(n_taxa);
            let mut t2 = DemoTree::yule(n_taxa);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);
            (t1, t2, t1_lca, t2_lca)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca)| {
            t1.nl_cophen_dist(t2, t1_lca, t2_lca, 2);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_nlcd_full_odd(bencher: divan::Bencher, n_taxa: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(n_taxa);
            let mut t2 = DemoTree::yule(n_taxa);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);
            (t1, t2, t1_lca, t2_lca)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca)| {
            t1.nl_cophen_dist(t2, t1_lca, t2_lca, 1);
        });
}


#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_naive_full(bencher: divan::Bencher, n_taxa: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(n_taxa);
            let mut t2 = DemoTree::yule(n_taxa);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            (t1, t2)
        })
        .bench_refs(|(t1, t2)| {
            t1.cophen_dist(t2, NORM);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000, 10200, 10400, 10600, 10800, 11000, 11200, 11400, 11600, 11800, 12000, 12200, 12400, 12600, 12800, 13000, 13200, 13400, 13600, 13800, 14000, 14200, 14400, 14600, 14800, 15000, 15200, 15400, 15600, 15800, 16000, 16200, 16400, 16600, 16800, 17000, 17200, 17400, 17600, 17800, 18000, 18200, 18400, 18600, 18800, 19000, 19200, 19400, 19600, 19800, 20000, 20200, 20400, 20600, 20800, 21000, 21200, 21400, 21600, 21800, 22000, 22200, 22400, 22600, 22800, 23000, 23200, 23400, 23600, 23800, 24000, 24200, 24400, 24600, 24800, 25000, 25200, 25400, 25600, 25800, 26000, 26200, 26400, 26600, 26800, 27000, 27200, 27400, 27600, 27800, 28000, 28200, 28400, 28600, 28800, 29000, 29200, 29400, 29600, 29800, 30000, 30200, 30400, 30600, 30800, 31000, 31200, 31400, 31600, 31800, 32000, 32200, 32400, 32600, 32800, 33000, 33200, 33400, 33600, 33800, 34000, 34200, 34400, 34600, 34800, 35000, 35200, 35400, 35600, 35800, 36000, 36200, 36400, 36600, 36800, 37000, 37200, 37400, 37600, 37800, 38000, 38200, 38400, 38600, 38800, 39000, 39200, 39400, 39600, 39800, 40000, 40200, 40400, 40600, 40800, 41000, 41200, 41400, 41600, 41800, 42000, 42200, 42400, 42600, 42800, 43000, 43200, 43400, 43600, 43800, 44000, 44200, 44400, 44600, 44800, 45000, 45200, 45400, 45600, 45800, 46000, 46200, 46400, 46600, 46800, 47000, 47200, 47400, 47600, 47800, 48000, 48200, 48400, 48600, 48800, 49000, 49200, 49400, 49600, 49800, 50000, 50200, 50400, 50600, 50800, 51000, 51200, 51400, 51600, 51800, 52000, 52200, 52400, 52600, 52800, 53000, 53200, 53400, 53600, 53800, 54000, 54200, 54400, 54600, 54800, 55000, 55200, 55400, 55600, 55800, 56000, 56200, 56400, 56600, 56800, 57000, 57200, 57400, 57600, 57800, 58000, 58200, 58400, 58600, 58800, 59000, 59200, 59400, 59600, 59800, 60000, 60200, 60400, 60600, 60800, 61000, 61200, 61400, 61600, 61800, 62000, 62200, 62400, 62600, 62800, 63000, 63200, 63400, 63600, 63800, 64000, 64200, 64400, 64600, 64800, 65000, 65200, 65400, 65600, 65800, 66000, 66200, 66400, 66600, 66800, 67000, 67200, 67400, 67600, 67800, 68000, 68200, 68400, 68600, 68800, 69000, 69200, 69400, 69600, 69800, 70000, 70200, 70400, 70600, 70800, 71000, 71200, 71400, 71600, 71800, 72000, 72200, 72400, 72600, 72800, 73000, 73200, 73400, 73600, 73800, 74000, 74200, 74400, 74600, 74800, 75000, 75200, 75400, 75600, 75800, 76000, 76200, 76400, 76600, 76800, 77000, 77200, 77400, 77600, 77800, 78000, 78200, 78400, 78600, 78800, 79000, 79200, 79400, 79600, 79800, 80000, 80200, 80400, 80600, 80800, 81000, 81200, 81400, 81600, 81800, 82000, 82200, 82400, 82600, 82800, 83000, 83200, 83400, 83600, 83800, 84000, 84200, 84400, 84600, 84800, 85000, 85200, 85400, 85600, 85800, 86000, 86200, 86400, 86600, 86800, 87000, 87200, 87400, 87600, 87800, 88000, 88200, 88400, 88600, 88800, 89000, 89200, 89400, 89600, 89800, 90000, 90200, 90400, 90600, 90800, 91000, 91200, 91400, 91600, 91800, 92000, 92200, 92400, 92600, 92800, 93000, 93200, 93400, 93600, 93800, 94000, 94200, 94400, 94600, 94800, 95000, 95200, 95400, 95600, 95800, 96000, 96200, 96400, 96600, 96800, 97000, 97200, 97400, 97600, 97800, 98000, 98200, 98400, 98600, 98800, 99000, 99200, 99400, 99600, 99800, 100000, 100200, 100400, 100600, 100800, 101000, 101200, 101400, 101600, 101800, 102000, 102200, 102400, 102600, 102800, 103000, 103200, 103400, 103600, 103800, 104000, 104200, 104400, 104600, 104800, 105000, 105200, 105400, 105600, 105800, 106000, 106200, 106400, 106600, 106800, 107000, 107200, 107400, 107600, 107800, 108000, 108200, 108400, 108600, 108800, 109000, 109200, 109400, 109600, 109800, 110000, 110200, 110400, 110600, 110800, 111000, 111200, 111400, 111600, 111800, 112000, 112200, 112400, 112600, 112800, 113000, 113200, 113400, 113600, 113800, 114000, 114200, 114400, 114600, 114800, 115000, 115200, 115400, 115600, 115800, 116000, 116200, 116400, 116600, 116800, 117000, 117200, 117400, 117600, 117800, 118000, 118200, 118400, 118600, 118800, 119000, 119200, 119400, 119600, 119800, 120000, 120200, 120400, 120600, 120800, 121000, 121200, 121400, 121600, 121800, 122000, 122200, 122400, 122600, 122800, 123000, 123200, 123400, 123600, 123800, 124000, 124200, 124400, 124600, 124800, 125000, 125200, 125400, 125600, 125800, 126000, 126200, 126400, 126600, 126800, 127000, 127200, 127400, 127600, 127800, 128000, 128200, 128400, 128600, 128800, 129000, 129200, 129400, 129600, 129800, 130000, 130200, 130400, 130600, 130800, 131000, 131200, 131400, 131600, 131800, 132000, 132200, 132400, 132600, 132800, 133000, 133200, 133400, 133600, 133800, 134000, 134200, 134400, 134600, 134800, 135000, 135200, 135400, 135600, 135800, 136000, 136200, 136400, 136600, 136800, 137000, 137200, 137400, 137600, 137800, 138000, 138200, 138400, 138600, 138800, 139000, 139200, 139400, 139600, 139800, 140000, 140200, 140400, 140600, 140800, 141000, 141200, 141400, 141600, 141800, 142000, 142200, 142400, 142600, 142800, 143000, 143200, 143400, 143600, 143800, 144000, 144200, 144400, 144600, 144800, 145000, 145200, 145400, 145600, 145800, 146000, 146200, 146400, 146600, 146800, 147000, 147200, 147400, 147600, 147800, 148000, 148200, 148400, 148600, 148800, 149000, 149200, 149400, 149600, 149800, 150000, 150200, 150400, 150600, 150800, 151000, 151200, 151400, 151600, 151800, 152000, 152200, 152400, 152600, 152800, 153000, 153200, 153400, 153600, 153800, 154000, 154200, 154400, 154600, 154800, 155000, 155200, 155400, 155600, 155800, 156000, 156200, 156400, 156600, 156800, 157000, 157200, 157400, 157600, 157800, 158000, 158200, 158400, 158600, 158800, 159000, 159200, 159400, 159600, 159800, 160000, 160200, 160400, 160600, 160800, 161000, 161200, 161400, 161600, 161800, 162000, 162200, 162400, 162600, 162800, 163000, 163200, 163400, 163600, 163800, 164000, 164200, 164400, 164600, 164800, 165000, 165200, 165400, 165600, 165800, 166000, 166200, 166400, 166600, 166800, 167000, 167200, 167400, 167600, 167800, 168000, 168200, 168400, 168600, 168800, 169000, 169200, 169400, 169600, 169800, 170000, 170200, 170400, 170600, 170800, 171000, 171200, 171400, 171600, 171800, 172000, 172200, 172400, 172600, 172800, 173000, 173200, 173400, 173600, 173800, 174000, 174200, 174400, 174600, 174800, 175000, 175200, 175400, 175600, 175800, 176000, 176200, 176400, 176600, 176800, 177000, 177200, 177400, 177600, 177800, 178000, 178200, 178400, 178600, 178800, 179000, 179200, 179400, 179600, 179800, 180000, 180200, 180400, 180600, 180800, 181000, 181200, 181400, 181600, 181800, 182000, 182200, 182400, 182600, 182800, 183000, 183200, 183400, 183600, 183800, 184000, 184200, 184400, 184600, 184800, 185000, 185200, 185400, 185600, 185800, 186000, 186200, 186400, 186600, 186800, 187000, 187200, 187400, 187600, 187800, 188000, 188200, 188400, 188600, 188800, 189000, 189200, 189400, 189600, 189800, 190000, 190200, 190400, 190600, 190800, 191000, 191200, 191400, 191600, 191800, 192000, 192200, 192400, 192600, 192800, 193000, 193200, 193400, 193600, 193800, 194000, 194200, 194400, 194600, 194800, 195000, 195200, 195400, 195600, 195800, 196000, 196200, 196400, 196600, 196800, 197000, 197200, 197400, 197600, 197800, 198000, 198200, 198400, 198600, 198800, 199000, 199200, 199400, 199600, 199800, 200000, 200200, 200400, 200600, 200800, 201000, 201200, 201400, 201600, 201800, 202000, 202200, 202400, 202600, 202800, 203000, 203200, 203400, 203600, 203800, 204000, 204200, 204400, 204600, 204800, 205000, 205200, 205400, 205600, 205800, 206000, 206200, 206400, 206600, 206800, 207000, 207200, 207400, 207600, 207800, 208000, 208200, 208400, 208600, 208800, 209000, 209200, 209400, 209600, 209800, 210000, 210200, 210400, 210600, 210800, 211000, 211200, 211400, 211600, 211800, 212000, 212200, 212400, 212600, 212800, 213000, 213200, 213400, 213600, 213800, 214000, 214200, 214400, 214600, 214800, 215000, 215200, 215400, 215600, 215800, 216000, 216200, 216400, 216600, 216800, 217000, 217200, 217400, 217600, 217800, 218000, 218200, 218400, 218600, 218800, 219000, 219200, 219400, 219600, 219800, 220000, 220200, 220400, 220600, 220800, 221000, 221200, 221400, 221600, 221800, 222000, 222200, 222400, 222600, 222800, 223000, 223200, 223400, 223600, 223800, 224000, 224200, 224400, 224600, 224800, 225000, 225200, 225400, 225600, 225800, 226000, 226200, 226400, 226600, 226800, 227000, 227200, 227400, 227600, 227800, 228000, 228200, 228400, 228600, 228800, 229000, 229200, 229400, 229600, 229800, 230000, 230200, 230400, 230600, 230800, 231000, 231200, 231400, 231600, 231800, 232000, 232200, 232400, 232600, 232800, 233000, 233200, 233400, 233600, 233800, 234000, 234200, 234400, 234600, 234800, 235000, 235200, 235400, 235600, 235800, 236000, 236200, 236400, 236600, 236800, 237000, 237200, 237400, 237600, 237800, 238000, 238200, 238400, 238600, 238800, 239000, 239200, 239400, 239600, 239800, 240000, 240200, 240400, 240600, 240800, 241000, 241200, 241400, 241600, 241800, 242000, 242200, 242400, 242600, 242800, 243000, 243200, 243400, 243600, 243800, 244000, 244200, 244400, 244600, 244800, 245000, 245200, 245400, 245600, 245800, 246000, 246200, 246400, 246600, 246800, 247000, 247200, 247400, 247600, 247800, 248000, 248200, 248400, 248600, 248800, 249000, 249200, 249400, 249600, 249800, 250000, 250200, 250400, 250600, 250800, 251000, 251200, 251400, 251600, 251800, 252000, 252200, 252400, 252600, 252800, 253000, 253200, 253400, 253600, 253800, 254000, 254200, 254400, 254600, 254800, 255000, 255200, 255400, 255600, 255800, 256000, 256200, 256400, 256600, 256800, 257000, 257200, 257400, 257600, 257800, 258000, 258200, 258400, 258600, 258800, 259000, 259200, 259400, 259600, 259800, 260000, 260200, 260400, 260600, 260800, 261000, 261200, 261400, 261600, 261800, 262000, 262200, 262400, 262600, 262800, 263000, 263200, 263400, 263600, 263800, 264000, 264200, 264400, 264600, 264800, 265000, 265200, 265400, 265600, 265800, 266000, 266200, 266400, 266600, 266800, 267000, 267200, 267400, 267600, 267800, 268000, 268200, 268400, 268600, 268800, 269000, 269200, 269400, 269600, 269800, 270000, 270200, 270400, 270600, 270800, 271000, 271200, 271400, 271600, 271800, 272000, 272200, 272400, 272600, 272800, 273000, 273200, 273400, 273600, 273800, 274000, 274200, 274400, 274600, 274800, 275000, 275200, 275400, 275600, 275800, 276000, 276200, 276400, 276600, 276800, 277000, 277200, 277400, 277600, 277800, 278000, 278200, 278400, 278600, 278800, 279000, 279200, 279400, 279600, 279800, 280000, 280200, 280400, 280600, 280800, 281000, 281200, 281400, 281600, 281800, 282000, 282200, 282400, 282600, 282800, 283000, 283200, 283400, 283600, 283800, 284000, 284200, 284400, 284600, 284800, 285000, 285200, 285400, 285600, 285800, 286000, 286200, 286400, 286600, 286800, 287000, 287200, 287400, 287600, 287800, 288000, 288200, 288400, 288600, 288800, 289000, 289200, 289400, 289600, 289800, 290000, 290200, 290400, 290600, 290800, 291000, 291200, 291400, 291600, 291800, 292000, 292200, 292400, 292600, 292800, 293000, 293200, 293400, 293600, 293800, 294000, 294200, 294400, 294600, 294800, 295000, 295200, 295400, 295600, 295800, 296000, 296200, 296400, 296600, 296800, 297000, 297200, 297400, 297600, 297800, 298000, 298200, 298400, 298600, 298800, 299000, 299200, 299400, 299600, 299800, 300000, 300200, 300400, 300600, 300800, 301000, 301200, 301400, 301600, 301800, 302000, 302200, 302400, 302600, 302800, 303000, 303200, 303400, 303600, 303800, 304000, 304200, 304400, 304600, 304800, 305000, 305200, 305400, 305600, 305800, 306000, 306200, 306400, 306600, 306800, 307000, 307200, 307400, 307600, 307800, 308000, 308200, 308400, 308600, 308800, 309000, 309200, 309400, 309600, 309800, 310000, 310200, 310400, 310600, 310800, 311000, 311200, 311400, 311600, 311800, 312000, 312200, 312400, 312600, 312800, 313000, 313200, 313400, 313600, 313800, 314000, 314200, 314400, 314600, 314800, 315000, 315200, 315400, 315600, 315800, 316000, 316200, 316400, 316600, 316800, 317000, 317200, 317400, 317600, 317800, 318000, 318200, 318400, 318600, 318800, 319000, 319200, 319400, 319600, 319800, 320000, 320200, 320400, 320600, 320800, 321000, 321200, 321400, 321600, 321800, 322000, 322200, 322400, 322600, 322800, 323000, 323200, 323400, 323600, 323800, 324000, 324200, 324400, 324600, 324800, 325000, 325200, 325400, 325600, 325800, 326000, 326200, 326400, 326600, 326800, 327000, 327200, 327400, 327600, 327800, 328000, 328200, 328400, 328600, 328800, 329000, 329200, 329400, 329600, 329800, 330000, 330200, 330400, 330600, 330800, 331000, 331200, 331400, 331600, 331800, 332000, 332200, 332400, 332600, 332800, 333000, 333200, 333400, 333600, 333800, 334000, 334200, 334400, 334600, 334800, 335000, 335200, 335400, 335600, 335800, 336000, 336200, 336400, 336600, 336800, 337000, 337200, 337400, 337600, 337800, 338000, 338200, 338400, 338600, 338800, 339000, 339200, 339400, 339600, 339800, 340000, 340200, 340400, 340600, 340800, 341000, 341200, 341400, 341600, 341800, 342000, 342200, 342400, 342600, 342800, 343000, 343200, 343400, 343600, 343800, 344000, 344200, 344400, 344600, 344800, 345000, 345200, 345400, 345600, 345800, 346000, 346200, 346400, 346600, 346800, 347000, 347200, 347400, 347600, 347800, 348000, 348200, 348400, 348600, 348800, 349000, 349200, 349400, 349600, 349800, 350000, 350200, 350400, 350600, 350800, 351000, 351200, 351400, 351600, 351800, 352000, 352200, 352400, 352600, 352800, 353000, 353200, 353400, 353600, 353800, 354000, 354200, 354400, 354600, 354800, 355000, 355200, 355400, 355600, 355800, 356000, 356200, 356400, 356600, 356800, 357000, 357200, 357400, 357600, 357800, 358000, 358200, 358400, 358600, 358800, 359000, 359200, 359400, 359600, 359800, 360000, 360200, 360400, 360600, 360800, 361000, 361200, 361400, 361600, 361800, 362000, 362200, 362400, 362600, 362800, 363000, 363200, 363400, 363600, 363800, 364000, 364200, 364400, 364600, 364800, 365000, 365200, 365400, 365600, 365800, 366000, 366200, 366400, 366600, 366800, 367000, 367200, 367400, 367600, 367800, 368000, 368200, 368400, 368600, 368800, 369000, 369200, 369400, 369600, 369800, 370000, 370200, 370400, 370600, 370800, 371000, 371200, 371400, 371600, 371800, 372000, 372200, 372400, 372600, 372800, 373000, 373200, 373400, 373600, 373800, 374000, 374200, 374400, 374600, 374800, 375000, 375200, 375400, 375600, 375800, 376000, 376200, 376400, 376600, 376800, 377000, 377200, 377400, 377600, 377800, 378000, 378200, 378400, 378600, 378800, 379000, 379200, 379400, 379600, 379800, 380000, 380200, 380400, 380600, 380800, 381000, 381200, 381400, 381600, 381800, 382000, 382200, 382400, 382600, 382800, 383000, 383200, 383400, 383600, 383800, 384000, 384200, 384400, 384600, 384800, 385000, 385200, 385400, 385600, 385800, 386000, 386200, 386400, 386600, 386800, 387000, 387200, 387400, 387600, 387800, 388000, 388200, 388400, 388600, 388800, 389000, 389200, 389400, 389600, 389800, 390000, 390200, 390400, 390600, 390800, 391000, 391200, 391400, 391600, 391800, 392000, 392200, 392400, 392600, 392800, 393000, 393200, 393400, 393600, 393800, 394000, 394200, 394400, 394600, 394800, 395000, 395200, 395400, 395600, 395800, 396000, 396200, 396400, 396600, 396800, 397000, 397200, 397400, 397600, 397800, 398000, 398200, 398400, 398600, 398800, 399000, 399200, 399400, 399600, 399800, 400000, 400200, 400400, 400600, 400800, 401000, 401200, 401400, 401600, 401800, 402000, 402200, 402400, 402600, 402800, 403000, 403200, 403400, 403600, 403800, 404000, 404200, 404400, 404600, 404800, 405000, 405200, 405400, 405600, 405800, 406000, 406200, 406400, 406600, 406800, 407000, 407200, 407400, 407600, 407800, 408000, 408200, 408400, 408600, 408800, 409000, 409200, 409400, 409600, 409800, 410000, 410200, 410400, 410600, 410800, 411000, 411200, 411400, 411600, 411800, 412000, 412200, 412400, 412600, 412800, 413000, 413200, 413400, 413600, 413800, 414000, 414200, 414400, 414600, 414800, 415000, 415200, 415400, 415600, 415800, 416000, 416200, 416400, 416600, 416800, 417000, 417200, 417400, 417600, 417800, 418000, 418200, 418400, 418600, 418800, 419000, 419200, 419400, 419600, 419800, 420000, 420200, 420400, 420600, 420800, 421000, 421200, 421400, 421600, 421800, 422000, 422200, 422400, 422600, 422800, 423000, 423200, 423400, 423600, 423800, 424000, 424200, 424400, 424600, 424800, 425000, 425200, 425400, 425600, 425800, 426000, 426200, 426400, 426600, 426800, 427000, 427200, 427400, 427600, 427800, 428000, 428200, 428400, 428600, 428800, 429000, 429200, 429400, 429600, 429800, 430000, 430200, 430400, 430600, 430800, 431000, 431200, 431400, 431600, 431800, 432000, 432200, 432400, 432600, 432800, 433000, 433200, 433400, 433600, 433800, 434000, 434200, 434400, 434600, 434800, 435000, 435200, 435400, 435600, 435800, 436000, 436200, 436400, 436600, 436800, 437000, 437200, 437400, 437600, 437800, 438000, 438200, 438400, 438600, 438800, 439000, 439200, 439400, 439600, 439800, 440000, 440200, 440400, 440600, 440800, 441000, 441200, 441400, 441600, 441800, 442000, 442200, 442400, 442600, 442800, 443000, 443200, 443400, 443600, 443800, 444000, 444200, 444400, 444600, 444800, 445000, 445200, 445400, 445600, 445800, 446000, 446200, 446400, 446600, 446800, 447000, 447200, 447400, 447600, 447800, 448000, 448200, 448400, 448600, 448800, 449000, 449200, 449400, 449600, 449800, 450000, 450200, 450400, 450600, 450800, 451000, 451200, 451400, 451600, 451800, 452000, 452200, 452400, 452600, 452800, 453000, 453200, 453400, 453600, 453800, 454000, 454200, 454400, 454600, 454800, 455000, 455200, 455400, 455600, 455800, 456000, 456200, 456400, 456600, 456800, 457000, 457200, 457400, 457600, 457800, 458000, 458200, 458400, 458600, 458800, 459000, 459200, 459400, 459600, 459800, 460000, 460200, 460400, 460600, 460800, 461000, 461200, 461400, 461600, 461800, 462000, 462200, 462400, 462600, 462800, 463000, 463200, 463400, 463600, 463800, 464000, 464200, 464400, 464600, 464800, 465000, 465200, 465400, 465600, 465800, 466000, 466200, 466400, 466600, 466800, 467000, 467200, 467400, 467600, 467800, 468000, 468200, 468400, 468600, 468800, 469000, 469200, 469400, 469600, 469800, 470000, 470200, 470400, 470600, 470800, 471000, 471200, 471400, 471600, 471800, 472000, 472200, 472400, 472600, 472800, 473000, 473200, 473400, 473600, 473800, 474000, 474200, 474400, 474600, 474800, 475000, 475200, 475400, 475600, 475800, 476000, 476200, 476400, 476600, 476800, 477000, 477200, 477400, 477600, 477800, 478000, 478200, 478400, 478600, 478800, 479000, 479200, 479400, 479600, 479800, 480000, 480200, 480400, 480600, 480800, 481000, 481200, 481400, 481600, 481800, 482000, 482200, 482400, 482600, 482800, 483000, 483200, 483400, 483600, 483800, 484000, 484200, 484400, 484600, 484800, 485000, 485200, 485400, 485600, 485800, 486000, 486200, 486400, 486600, 486800, 487000, 487200, 487400, 487600, 487800, 488000, 488200, 488400, 488600, 488800, 489000, 489200, 489400, 489600, 489800, 490000, 490200, 490400, 490600, 490800, 491000, 491200, 491400, 491600, 491800, 492000, 492200, 492400, 492600, 492800, 493000, 493200, 493400, 493600, 493800, 494000, 494200, 494400, 494600, 494800, 495000, 495200, 495400, 495600, 495800, 496000, 496200, 496400, 496600, 496800, 497000, 497200, 497400, 497600, 497800, 498000, 498200, 498400, 498600, 498800, 499000, 499200, 499400, 499600, 499800, 500000, 500200, 500400, 500600, 500800, 501000, 501200, 501400, 501600, 501800, 502000, 502200, 502400, 502600, 502800, 503000, 503200, 503400, 503600, 503800, 504000, 504200, 504400, 504600, 504800, 505000, 505200, 505400, 505600, 505800, 506000, 506200, 506400, 506600, 506800, 507000, 507200, 507400, 507600, 507800, 508000, 508200, 508400, 508600, 508800, 509000, 509200, 509400, 509600, 509800, 510000, 510200, 510400, 510600, 510800, 511000, 511200, 511400, 511600, 511800, 512000, 512200, 512400, 512600, 512800, 513000, 513200, 513400, 513600, 513800, 514000, 514200, 514400, 514600, 514800, 515000, 515200, 515400, 515600, 515800, 516000, 516200, 516400, 516600, 516800, 517000, 517200, 517400, 517600, 517800, 518000, 518200, 518400, 518600, 518800, 519000, 519200, 519400, 519600, 519800, 520000, 520200, 520400, 520600, 520800, 521000, 521200, 521400, 521600, 521800, 522000, 522200, 522400, 522600, 522800, 523000, 523200, 523400, 523600, 523800, 524000, 524200, 524400, 524600, 524800, 525000, 525200, 525400, 525600, 525800, 526000, 526200, 526400, 526600, 526800, 527000, 527200, 527400, 527600, 527800, 528000, 528200, 528400, 528600, 528800, 529000, 529200, 529400, 529600, 529800, 530000, 530200, 530400, 530600, 530800, 531000, 531200, 531400, 531600, 531800, 532000, 532200, 532400, 532600, 532800, 533000, 533200, 533400, 533600, 533800, 534000, 534200, 534400, 534600, 534800, 535000, 535200, 535400, 535600, 535800, 536000, 536200, 536400, 536600, 536800, 537000, 537200, 537400, 537600, 537800, 538000, 538200, 538400, 538600, 538800, 539000, 539200, 539400, 539600, 539800, 540000, 540200, 540400, 540600, 540800, 541000, 541200, 541400, 541600, 541800, 542000, 542200, 542400, 542600, 542800, 543000, 543200, 543400, 543600, 543800, 544000, 544200, 544400, 544600, 544800, 545000, 545200, 545400, 545600, 545800, 546000, 546200, 546400, 546600, 546800, 547000, 547200, 547400, 547600, 547800, 548000, 548200, 548400, 548600, 548800, 549000, 549200, 549400, 549600, 549800, 550000, 550200, 550400, 550600, 550800, 551000, 551200, 551400, 551600, 551800, 552000, 552200, 552400, 552600, 552800, 553000, 553200, 553400, 553600, 553800, 554000, 554200, 554400, 554600, 554800, 555000, 555200, 555400, 555600, 555800, 556000, 556200, 556400, 556600, 556800, 557000, 557200, 557400, 557600, 557800, 558000, 558200, 558400, 558600, 558800, 559000, 559200, 559400, 559600, 559800, 560000, 560200, 560400, 560600, 560800, 561000, 561200, 561400, 561600, 561800, 562000, 562200, 562400, 562600, 562800, 563000, 563200, 563400, 563600, 563800, 564000, 564200, 564400, 564600, 564800, 565000, 565200, 565400, 565600, 565800, 566000, 566200, 566400, 566600, 566800, 567000, 567200, 567400, 567600, 567800, 568000, 568200, 568400, 568600, 568800, 569000, 569200, 569400, 569600, 569800, 570000, 570200, 570400, 570600, 570800, 571000, 571200, 571400, 571600, 571800, 572000, 572200, 572400, 572600, 572800, 573000, 573200, 573400, 573600, 573800, 574000, 574200, 574400, 574600, 574800, 575000, 575200, 575400, 575600, 575800, 576000, 576200, 576400, 576600, 576800, 577000, 577200, 577400, 577600, 577800, 578000, 578200, 578400, 578600, 578800, 579000, 579200, 579400, 579600, 579800, 580000, 580200, 580400, 580600, 580800, 581000, 581200, 581400, 581600, 581800, 582000, 582200, 582400, 582600, 582800, 583000, 583200, 583400, 583600, 583800, 584000, 584200, 584400, 584600, 584800, 585000, 585200, 585400, 585600, 585800, 586000, 586200, 586400, 586600, 586800, 587000, 587200, 587400, 587600, 587800, 588000, 588200, 588400, 588600, 588800, 589000, 589200, 589400, 589600, 589800, 590000, 590200, 590400, 590600, 590800, 591000, 591200, 591400, 591600, 591800, 592000, 592200, 592400, 592600, 592800, 593000, 593200, 593400, 593600, 593800, 594000, 594200, 594400, 594600, 594800, 595000, 595200, 595400, 595600, 595800, 596000, 596200, 596400, 596600, 596800, 597000, 597200, 597400, 597600, 597800, 598000, 598200, 598400, 598600, 598800, 599000, 599200, 599400, 599600, 599800, 600000, 600200, 600400, 600600, 600800, 601000, 601200, 601400, 601600, 601800, 602000, 602200, 602400, 602600, 602800, 603000, 603200, 603400, 603600, 603800, 604000, 604200, 604400, 604600, 604800, 605000, 605200, 605400, 605600, 605800, 606000, 606200, 606400, 606600, 606800, 607000, 607200, 607400, 607600, 607800, 608000, 608200, 608400, 608600, 608800, 609000, 609200, 609400, 609600, 609800, 610000, 610200, 610400, 610600, 610800, 611000, 611200, 611400, 611600, 611800, 612000, 612200, 612400, 612600, 612800, 613000, 613200, 613400, 613600, 613800, 614000, 614200, 614400, 614600, 614800, 615000, 615200, 615400, 615600, 615800, 616000, 616200, 616400, 616600, 616800, 617000, 617200, 617400, 617600, 617800, 618000, 618200, 618400, 618600, 618800, 619000, 619200, 619400, 619600, 619800, 620000, 620200, 620400, 620600, 620800, 621000, 621200, 621400, 621600, 621800, 622000, 622200, 622400, 622600, 622800, 623000, 623200, 623400, 623600, 623800, 624000, 624200, 624400, 624600, 624800, 625000, 625200, 625400, 625600, 625800, 626000, 626200, 626400, 626600, 626800, 627000, 627200, 627400, 627600, 627800, 628000, 628200, 628400, 628600, 628800, 629000, 629200, 629400, 629600, 629800, 630000, 630200, 630400, 630600, 630800, 631000, 631200, 631400, 631600, 631800, 632000, 632200, 632400, 632600, 632800, 633000, 633200, 633400, 633600, 633800, 634000, 634200, 634400, 634600, 634800, 635000, 635200, 635400, 635600, 635800, 636000, 636200, 636400, 636600, 636800, 637000, 637200, 637400, 637600, 637800, 638000, 638200, 638400, 638600, 638800, 639000, 639200, 639400, 639600, 639800, 640000, 640200, 640400, 640600, 640800, 641000, 641200, 641400, 641600, 641800, 642000, 642200, 642400, 642600, 642800, 643000, 643200, 643400, 643600, 643800, 644000, 644200, 644400, 644600, 644800, 645000, 645200, 645400, 645600, 645800, 646000, 646200, 646400, 646600, 646800, 647000, 647200, 647400, 647600, 647800, 648000, 648200, 648400, 648600, 648800, 649000, 649200, 649400, 649600, 649800, 650000, 650200, 650400, 650600, 650800, 651000, 651200, 651400, 651600, 651800, 652000, 652200, 652400, 652600, 652800, 653000, 653200, 653400, 653600, 653800, 654000, 654200, 654400, 654600, 654800, 655000, 655200, 655400, 655600, 655800, 656000, 656200, 656400, 656600, 656800, 657000, 657200, 657400, 657600, 657800, 658000, 658200, 658400, 658600, 658800, 659000, 659200, 659400, 659600, 659800, 660000, 660200, 660400, 660600, 660800, 661000, 661200, 661400, 661600, 661800, 662000, 662200, 662400, 662600, 662800, 663000, 663200, 663400, 663600, 663800, 664000, 664200, 664400, 664600, 664800, 665000, 665200, 665400, 665600, 665800, 666000, 666200, 666400, 666600, 666800, 667000, 667200, 667400, 667600, 667800, 668000, 668200, 668400, 668600, 668800, 669000, 669200, 669400, 669600, 669800, 670000, 670200, 670400, 670600, 670800, 671000, 671200, 671400, 671600, 671800, 672000, 672200, 672400, 672600, 672800, 673000, 673200, 673400, 673600, 673800, 674000, 674200, 674400, 674600, 674800, 675000, 675200, 675400, 675600, 675800, 676000, 676200, 676400, 676600, 676800, 677000, 677200, 677400, 677600, 677800, 678000, 678200, 678400, 678600, 678800, 679000, 679200, 679400, 679600, 679800, 680000, 680200, 680400, 680600, 680800, 681000, 681200, 681400, 681600, 681800, 682000, 682200, 682400, 682600, 682800, 683000, 683200, 683400, 683600, 683800, 684000, 684200, 684400, 684600, 684800, 685000, 685200, 685400, 685600, 685800, 686000, 686200, 686400, 686600, 686800, 687000, 687200, 687400, 687600, 687800, 688000, 688200, 688400, 688600, 688800, 689000, 689200, 689400, 689600, 689800, 690000, 690200, 690400, 690600, 690800, 691000, 691200, 691400, 691600, 691800, 692000, 692200, 692400, 692600, 692800, 693000, 693200, 693400, 693600, 693800, 694000, 694200, 694400, 694600, 694800, 695000, 695200, 695400, 695600, 695800, 696000, 696200, 696400, 696600, 696800, 697000, 697200, 697400, 697600, 697800, 698000, 698200, 698400, 698600, 698800, 699000, 699200, 699400, 699600, 699800, 700000, 700200, 700400, 700600, 700800, 701000, 701200, 701400, 701600, 701800, 702000, 702200, 702400, 702600, 702800, 703000, 703200, 703400, 703600, 703800, 704000, 704200, 704400, 704600, 704800, 705000, 705200, 705400, 705600, 705800, 706000, 706200, 706400, 706600, 706800, 707000, 707200, 707400, 707600, 707800, 708000, 708200, 708400, 708600, 708800, 709000, 709200, 709400, 709600, 709800, 710000, 710200, 710400, 710600, 710800, 711000, 711200, 711400, 711600, 711800, 712000, 712200, 712400, 712600, 712800, 713000, 713200, 713400, 713600, 713800, 714000, 714200, 714400, 714600, 714800, 715000, 715200, 715400, 715600, 715800, 716000, 716200, 716400, 716600, 716800, 717000, 717200, 717400, 717600, 717800, 718000, 718200, 718400, 718600, 718800, 719000, 719200, 719400, 719600, 719800, 720000, 720200, 720400, 720600, 720800, 721000, 721200, 721400, 721600, 721800, 722000, 722200, 722400, 722600, 722800, 723000, 723200, 723400, 723600, 723800, 724000, 724200, 724400, 724600, 724800, 725000, 725200, 725400, 725600, 725800, 726000, 726200, 726400, 726600, 726800, 727000, 727200, 727400, 727600, 727800, 728000, 728200, 728400, 728600, 728800, 729000, 729200, 729400, 729600, 729800, 730000, 730200, 730400, 730600, 730800, 731000, 731200, 731400, 731600, 731800, 732000, 732200, 732400, 732600, 732800, 733000, 733200, 733400, 733600, 733800, 734000, 734200, 734400, 734600, 734800, 735000, 735200, 735400, 735600, 735800, 736000, 736200, 736400, 736600, 736800, 737000, 737200, 737400, 737600, 737800, 738000, 738200, 738400, 738600, 738800, 739000, 739200, 739400, 739600, 739800, 740000, 740200, 740400, 740600, 740800, 741000, 741200, 741400, 741600, 741800, 742000, 742200, 742400, 742600, 742800, 743000, 743200, 743400, 743600, 743800, 744000, 744200, 744400, 744600, 744800, 745000, 745200, 745400, 745600, 745800, 746000, 746200, 746400, 746600, 746800, 747000, 747200, 747400, 747600, 747800, 748000, 748200, 748400, 748600, 748800, 749000, 749200, 749400, 749600, 749800, 750000, 750200, 750400, 750600, 750800, 751000, 751200, 751400, 751600, 751800, 752000, 752200, 752400, 752600, 752800, 753000, 753200, 753400, 753600, 753800, 754000, 754200, 754400, 754600, 754800, 755000, 755200, 755400, 755600, 755800, 756000, 756200, 756400, 756600, 756800, 757000, 757200, 757400, 757600, 757800, 758000, 758200, 758400, 758600, 758800, 759000, 759200, 759400, 759600, 759800, 760000, 760200, 760400, 760600, 760800, 761000, 761200, 761400, 761600, 761800, 762000, 762200, 762400, 762600, 762800, 763000, 763200, 763400, 763600, 763800, 764000, 764200, 764400, 764600, 764800, 765000, 765200, 765400, 765600, 765800, 766000, 766200, 766400, 766600, 766800, 767000, 767200, 767400, 767600, 767800, 768000, 768200, 768400, 768600, 768800, 769000, 769200, 769400, 769600, 769800, 770000, 770200, 770400, 770600, 770800, 771000, 771200, 771400, 771600, 771800, 772000, 772200, 772400, 772600, 772800, 773000, 773200, 773400, 773600, 773800, 774000, 774200, 774400, 774600, 774800, 775000, 775200, 775400, 775600, 775800, 776000, 776200, 776400, 776600, 776800, 777000, 777200, 777400, 777600, 777800, 778000, 778200, 778400, 778600, 778800, 779000, 779200, 779400, 779600, 779800, 780000, 780200, 780400, 780600, 780800, 781000, 781200, 781400, 781600, 781800, 782000, 782200, 782400, 782600, 782800, 783000, 783200, 783400, 783600, 783800, 784000, 784200, 784400, 784600, 784800, 785000, 785200, 785400, 785600, 785800, 786000, 786200, 786400, 786600, 786800, 787000, 787200, 787400, 787600, 787800, 788000, 788200, 788400, 788600, 788800, 789000, 789200, 789400, 789600, 789800, 790000, 790200, 790400, 790600, 790800, 791000, 791200, 791400, 791600, 791800, 792000, 792200, 792400, 792600, 792800, 793000, 793200, 793400, 793600, 793800, 794000, 794200, 794400, 794600, 794800, 795000, 795200, 795400, 795600, 795800, 796000, 796200, 796400, 796600, 796800, 797000, 797200, 797400, 797600, 797800, 798000, 798200, 798400, 798600, 798800, 799000, 799200, 799400, 799600, 799800, 800000, 800200, 800400, 800600, 800800, 801000, 801200, 801400, 801600, 801800, 802000, 802200, 802400, 802600, 802800, 803000, 803200, 803400, 803600, 803800, 804000, 804200, 804400, 804600, 804800, 805000, 805200, 805400, 805600, 805800, 806000, 806200, 806400, 806600, 806800, 807000, 807200, 807400, 807600, 807800, 808000, 808200, 808400, 808600, 808800, 809000, 809200, 809400, 809600, 809800, 810000, 810200, 810400, 810600, 810800, 811000, 811200, 811400, 811600, 811800, 812000, 812200, 812400, 812600, 812800, 813000, 813200, 813400, 813600, 813800, 814000, 814200, 814400, 814600, 814800, 815000, 815200, 815400, 815600, 815800, 816000, 816200, 816400, 816600, 816800, 817000, 817200, 817400, 817600, 817800, 818000, 818200, 818400, 818600, 818800, 819000, 819200, 819400, 819600, 819800, 820000, 820200, 820400, 820600, 820800, 821000, 821200, 821400, 821600, 821800, 822000, 822200, 822400, 822600, 822800, 823000, 823200, 823400, 823600, 823800, 824000, 824200, 824400, 824600, 824800, 825000, 825200, 825400, 825600, 825800, 826000, 826200, 826400, 826600, 826800, 827000, 827200, 827400, 827600, 827800, 828000, 828200, 828400, 828600, 828800, 829000, 829200, 829400, 829600, 829800, 830000, 830200, 830400, 830600, 830800, 831000, 831200, 831400, 831600, 831800, 832000, 832200, 832400, 832600, 832800, 833000, 833200, 833400, 833600, 833800, 834000, 834200, 834400, 834600, 834800, 835000, 835200, 835400, 835600, 835800, 836000, 836200, 836400, 836600, 836800, 837000, 837200, 837400, 837600, 837800, 838000, 838200, 838400, 838600, 838800, 839000, 839200, 839400, 839600, 839800, 840000, 840200, 840400, 840600, 840800, 841000, 841200, 841400, 841600, 841800, 842000, 842200, 842400, 842600, 842800, 843000, 843200, 843400, 843600, 843800, 844000, 844200, 844400, 844600, 844800, 845000, 845200, 845400, 845600, 845800, 846000, 846200, 846400, 846600, 846800, 847000, 847200, 847400, 847600, 847800, 848000, 848200, 848400, 848600, 848800, 849000, 849200, 849400, 849600, 849800, 850000, 850200, 850400, 850600, 850800, 851000, 851200, 851400, 851600, 851800, 852000, 852200, 852400, 852600, 852800, 853000, 853200, 853400, 853600, 853800, 854000, 854200, 854400, 854600, 854800, 855000, 855200, 855400, 855600, 855800, 856000, 856200, 856400, 856600, 856800, 857000, 857200, 857400, 857600, 857800, 858000, 858200, 858400, 858600, 858800, 859000, 859200, 859400, 859600, 859800, 860000, 860200, 860400, 860600, 860800, 861000, 861200, 861400, 861600, 861800, 862000, 862200, 862400, 862600, 862800, 863000, 863200, 863400, 863600, 863800, 864000, 864200, 864400, 864600, 864800, 865000, 865200, 865400, 865600, 865800, 866000, 866200, 866400, 866600, 866800, 867000, 867200, 867400, 867600, 867800, 868000, 868200, 868400, 868600, 868800, 869000, 869200, 869400, 869600, 869800, 870000, 870200, 870400, 870600, 870800, 871000, 871200, 871400, 871600, 871800, 872000, 872200, 872400, 872600, 872800, 873000, 873200, 873400, 873600, 873800, 874000, 874200, 874400, 874600, 874800, 875000, 875200, 875400, 875600, 875800, 876000, 876200, 876400, 876600, 876800, 877000, 877200, 877400, 877600, 877800, 878000, 878200, 878400, 878600, 878800, 879000, 879200, 879400, 879600, 879800, 880000, 880200, 880400, 880600, 880800, 881000, 881200, 881400, 881600, 881800, 882000, 882200, 882400, 882600, 882800, 883000, 883200, 883400, 883600, 883800, 884000, 884200, 884400, 884600, 884800, 885000, 885200, 885400, 885600, 885800, 886000, 886200, 886400, 886600, 886800, 887000, 887200, 887400, 887600, 887800, 888000, 888200, 888400, 888600, 888800, 889000, 889200, 889400, 889600, 889800, 890000, 890200, 890400, 890600, 890800, 891000, 891200, 891400, 891600, 891800, 892000, 892200, 892400, 892600, 892800, 893000, 893200, 893400, 893600, 893800, 894000, 894200, 894400, 894600, 894800, 895000, 895200, 895400, 895600, 895800, 896000, 896200, 896400, 896600, 896800, 897000, 897200, 897400, 897600, 897800, 898000, 898200, 898400, 898600, 898800, 899000, 899200, 899400, 899600, 899800, 900000, 900200, 900400, 900600, 900800, 901000, 901200, 901400, 901600, 901800, 902000, 902200, 902400, 902600, 902800, 903000, 903200, 903400, 903600, 903800, 904000, 904200, 904400, 904600, 904800, 905000, 905200, 905400, 905600, 905800, 906000, 906200, 906400, 906600, 906800, 907000, 907200, 907400, 907600, 907800, 908000, 908200, 908400, 908600, 908800, 909000, 909200, 909400, 909600, 909800, 910000, 910200, 910400, 910600, 910800, 911000, 911200, 911400, 911600, 911800, 912000, 912200, 912400, 912600, 912800, 913000, 913200, 913400, 913600, 913800, 914000, 914200, 914400, 914600, 914800, 915000, 915200, 915400, 915600, 915800, 916000, 916200, 916400, 916600, 916800, 917000, 917200, 917400, 917600, 917800, 918000, 918200, 918400, 918600, 918800, 919000, 919200, 919400, 919600, 919800, 920000, 920200, 920400, 920600, 920800, 921000, 921200, 921400, 921600, 921800, 922000, 922200, 922400, 922600, 922800, 923000, 923200, 923400, 923600, 923800, 924000, 924200, 924400, 924600, 924800, 925000, 925200, 925400, 925600, 925800, 926000, 926200, 926400, 926600, 926800, 927000, 927200, 927400, 927600, 927800, 928000, 928200, 928400, 928600, 928800, 929000, 929200, 929400, 929600, 929800, 930000, 930200, 930400, 930600, 930800, 931000, 931200, 931400, 931600, 931800, 932000, 932200, 932400, 932600, 932800, 933000, 933200, 933400, 933600, 933800, 934000, 934200, 934400, 934600, 934800, 935000, 935200, 935400, 935600, 935800, 936000, 936200, 936400, 936600, 936800, 937000, 937200, 937400, 937600, 937800, 938000, 938200, 938400, 938600, 938800, 939000, 939200, 939400, 939600, 939800, 940000, 940200, 940400, 940600, 940800, 941000, 941200, 941400, 941600, 941800, 942000, 942200, 942400, 942600, 942800, 943000, 943200, 943400, 943600, 943800, 944000, 944200, 944400, 944600, 944800, 945000, 945200, 945400, 945600, 945800, 946000, 946200, 946400, 946600, 946800, 947000, 947200, 947400, 947600, 947800, 948000, 948200, 948400, 948600, 948800, 949000, 949200, 949400, 949600, 949800, 950000, 950200, 950400, 950600, 950800, 951000, 951200, 951400, 951600, 951800, 952000, 952200, 952400, 952600, 952800, 953000, 953200, 953400, 953600, 953800, 954000, 954200, 954400, 954600, 954800, 955000, 955200, 955400, 955600, 955800, 956000, 956200, 956400, 956600, 956800, 957000, 957200, 957400, 957600, 957800, 958000, 958200, 958400, 958600, 958800, 959000, 959200, 959400, 959600, 959800, 960000, 960200, 960400, 960600, 960800, 961000, 961200, 961400, 961600, 961800, 962000, 962200, 962400, 962600, 962800, 963000, 963200, 963400, 963600, 963800, 964000, 964200, 964400, 964600, 964800, 965000, 965200, 965400, 965600, 965800, 966000, 966200, 966400, 966600, 966800, 967000, 967200, 967400, 967600, 967800, 968000, 968200, 968400, 968600, 968800, 969000, 969200, 969400, 969600, 969800, 970000, 970200, 970400, 970600, 970800, 971000, 971200, 971400, 971600, 971800, 972000, 972200, 972400, 972600, 972800, 973000, 973200, 973400, 973600, 973800, 974000, 974200, 974400, 974600, 974800, 975000, 975200, 975400, 975600, 975800, 976000, 976200, 976400, 976600, 976800, 977000, 977200, 977400, 977600, 977800, 978000, 978200, 978400, 978600, 978800, 979000, 979200, 979400, 979600, 979800, 980000, 980200, 980400, 980600, 980800, 981000, 981200, 981400, 981600, 981800, 982000, 982200, 982400, 982600, 982800, 983000, 983200, 983400, 983600, 983800, 984000, 984200, 984400, 984600, 984800, 985000, 985200, 985400, 985600, 985800, 986000, 986200, 986400, 986600, 986800, 987000, 987200, 987400, 987600, 987800, 988000, 988200, 988400, 988600, 988800, 989000, 989200, 989400, 989600, 989800, 990000, 990200, 990400, 990600, 990800, 991000, 991200, 991400, 991600, 991800, 992000, 992200, 992400, 992600, 992800, 993000, 993200, 993400, 993600, 993800, 994000, 994200, 994400, 994600, 994800, 995000, 995200, 995400, 995600, 995800, 996000, 996200, 996400, 996600, 996800, 997000, 997200, 997400, 997600, 997800, 998000, 998200, 998400, 998600, 998800, 999000, 999200, 999400, 999600, 999800, 1000000])]
fn benchmark_binary_search(bencher: divan::Bencher, taxa_size: usize) {
    fn binary_search_omega(
        node_ids: &Vec<usize>, 
        t2_zeta: usize
    )->usize
    {
        let mut high = node_ids.len()-1;
        let mut low = 0;
        let default = node_ids[high];

        while low <= high{
            let mid = low + (high - low)/2;
    
            if mid+1==node_ids.len(){
                return node_ids[mid]
            }

            if node_ids[mid] >= t2_zeta && node_ids[mid+1] < t2_zeta{
                return node_ids[mid];
            }
        
            if node_ids[mid] > t2_zeta{
                low = mid + 1;
            }
        
            else{
                high = mid - 1;
            }
        }

        return default;

    }
    bencher
        .with_inputs(|| {
            let x: Vec<usize> = (0..taxa_size).rev().collect();

            let binding = x.clone();
            let y = binding.choose(&mut rand::thread_rng()).unwrap();

            (x, *y)
        })
        .bench_refs(|(vec, target)| {
            let tar = binary_search_omega(vec, target.clone());
            if tar != *target{panic!("Help!")}
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_median_node(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            let t1 = DemoTree::yule(taxa_size);
            t1
        })
        .bench_refs(|t1| {
            let _ = t1.get_median_node_id();
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_seq_product(bencher: divan::Bencher, vec_size: usize) {
    bencher
        .with_inputs(|| {
            // let t = DemoTree::yule(100);
            let mut rng = rand::thread_rng();
            let range = Uniform::new(0, 20);
        
            let mut alpha: Vec<u64> = (0..vec_size).map(|_| rng.sample(&range)).collect();
            let mut beta: Vec<u64> = (0..vec_size).map(|_| rng.sample(&range)).collect();
            
            alpha.sort();
            beta.sort();
            
            let alpha: Vec<f32> = alpha.into_iter().map(|x| x as f32).collect();
            let beta: Vec<f32> = beta.into_iter().map(|x| x as f32).collect();
            let pt = DemoTree::pascal_triangle(1);
        
            (alpha, beta, pt)
        })
        .bench_values(|(alpha,beta, pt)| {
            let _ = DemoTree::seq_product(alpha, beta, &pt, 1);
        });
}


#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000, 10200, 10400, 10600, 10800, 11000, 11200, 11400, 11600, 11800, 12000, 12200, 12400, 12600, 12800, 13000, 13200, 13400, 13600, 13800, 14000, 14200, 14400, 14600, 14800, 15000, 15200, 15400, 15600, 15800, 16000, 16200, 16400, 16600, 16800, 17000, 17200, 17400, 17600, 17800, 18000, 18200, 18400, 18600, 18800, 19000, 19200, 19400, 19600, 19800, 20000, 20200, 20400, 20600, 20800, 21000, 21200, 21400, 21600, 21800, 22000, 22200, 22400, 22600, 22800, 23000, 23200, 23400, 23600, 23800, 24000, 24200, 24400, 24600, 24800, 25000, 25200, 25400, 25600, 25800, 26000, 26200, 26400, 26600, 26800, 27000, 27200, 27400, 27600, 27800, 28000, 28200, 28400, 28600, 28800, 29000, 29200, 29400, 29600, 29800, 30000, 30200, 30400, 30600, 30800, 31000, 31200, 31400, 31600, 31800, 32000, 32200, 32400, 32600, 32800, 33000, 33200, 33400, 33600, 33800, 34000, 34200, 34400, 34600, 34800, 35000, 35200, 35400, 35600, 35800, 36000, 36200, 36400, 36600, 36800, 37000, 37200, 37400, 37600, 37800, 38000, 38200, 38400, 38600, 38800, 39000, 39200, 39400, 39600, 39800, 40000, 40200, 40400, 40600, 40800, 41000, 41200, 41400, 41600, 41800, 42000, 42200, 42400, 42600, 42800, 43000, 43200, 43400, 43600, 43800, 44000, 44200, 44400, 44600, 44800, 45000, 45200, 45400, 45600, 45800, 46000, 46200, 46400, 46600, 46800, 47000, 47200, 47400, 47600, 47800, 48000, 48200, 48400, 48600, 48800, 49000, 49200, 49400, 49600, 49800, 50000, 50200, 50400, 50600, 50800, 51000, 51200, 51400, 51600, 51800, 52000, 52200, 52400, 52600, 52800, 53000, 53200, 53400, 53600, 53800, 54000, 54200, 54400, 54600, 54800, 55000, 55200, 55400, 55600, 55800, 56000, 56200, 56400, 56600, 56800, 57000, 57200, 57400, 57600, 57800, 58000, 58200, 58400, 58600, 58800, 59000, 59200, 59400, 59600, 59800, 60000, 60200, 60400, 60600, 60800, 61000, 61200, 61400, 61600, 61800, 62000, 62200, 62400, 62600, 62800, 63000, 63200, 63400, 63600, 63800, 64000, 64200, 64400, 64600, 64800, 65000, 65200, 65400, 65600, 65800, 66000, 66200, 66400, 66600, 66800, 67000, 67200, 67400, 67600, 67800, 68000, 68200, 68400, 68600, 68800, 69000, 69200, 69400, 69600, 69800, 70000, 70200, 70400, 70600, 70800, 71000, 71200, 71400, 71600, 71800, 72000, 72200, 72400, 72600, 72800, 73000, 73200, 73400, 73600, 73800, 74000, 74200, 74400, 74600, 74800, 75000, 75200, 75400, 75600, 75800, 76000, 76200, 76400, 76600, 76800, 77000, 77200, 77400, 77600, 77800, 78000, 78200, 78400, 78600, 78800, 79000, 79200, 79400, 79600, 79800, 80000, 80200, 80400, 80600, 80800, 81000, 81200, 81400, 81600, 81800, 82000, 82200, 82400, 82600, 82800, 83000, 83200, 83400, 83600, 83800, 84000, 84200, 84400, 84600, 84800, 85000, 85200, 85400, 85600, 85800, 86000, 86200, 86400, 86600, 86800, 87000, 87200, 87400, 87600, 87800, 88000, 88200, 88400, 88600, 88800, 89000, 89200, 89400, 89600, 89800, 90000, 90200, 90400, 90600, 90800, 91000, 91200, 91400, 91600, 91800, 92000, 92200, 92400, 92600, 92800, 93000, 93200, 93400, 93600, 93800, 94000, 94200, 94400, 94600, 94800, 95000, 95200, 95400, 95600, 95800, 96000, 96200, 96400, 96600, 96800, 97000, 97200, 97400, 97600, 97800, 98000, 98200, 98400, 98600, 98800, 99000, 99200, 99400, 99600, 99800])]
fn benchmark_contract(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            let mut rng = thread_rng();
            let mut t1 = DemoTree::yule(taxa_size);
            let postord_node_ids = t1.postord_ids(t1.get_root_id()).collect_vec();
            let taxa_set = (0..taxa_size).map(|x| x as u32).collect_vec();
            let taxa_subset = taxa_set
                .into_iter()
                .choose_multiple(&mut rng, 3 * taxa_size / 4);
            t1.precompute_constant_time_lca();
            (t1, taxa_subset, postord_node_ids)
        })
        .bench_refs(|(t1, taxa_subset, postord_node_ids)| {
            let mut taxa_map: HashMap<&u32, usize> = vec![].into_iter().collect();
            for (idx, x) in taxa_subset.iter().enumerate(){
                taxa_map.insert(x, idx);
            }
            NearLinearCopheneticDistance::contract_and_median(t1, &taxa_map, postord_node_ids.as_slice());
        });
}

#[divan::bench(args = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 587, 589, 591, 593, 595, 597, 599, 601, 603, 605, 607, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999])]
fn benchmark_nlcd_norms_odd(bencher: divan::Bencher, norm: u32) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(500);
            let mut t2 = DemoTree::yule(500);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);
            (t1, t2, t1_lca, t2_lca)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca)| {
            t1.nl_cophen_dist(t2, t1_lca, t2_lca, norm);
        });
}

#[divan::bench(args = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998])]
fn benchmark_nlcd_norms_even(bencher: divan::Bencher, norm: u32) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(500);
            let mut t2 = DemoTree::yule(500);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);
            (t1, t2, t1_lca, t2_lca)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca)| {
            t1.nl_cophen_dist(t2, t1_lca, t2_lca, norm);
        });
}

#[divan::bench(args = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000])]
fn benchmark_naive_norms(bencher: divan::Bencher, norm: u32) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(5000);
            let mut t2 = DemoTree::yule(5000);
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            (t1, t2)
        })
        .bench_refs(|(t1, t2)| {
            t1.cophen_dist(t2, norm);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_nlcd_single_mix_odd(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(taxa_size);
            let mut t2 = DemoTree::yule(taxa_size);
            let binding1 = t1
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let binding2 = t2
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let taxa_set: HashSet<_> = binding1.intersection(&binding2).map(|x| x.clone().clone()).collect();
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_median = t1.get_median_node_id();
            let t2_median = t2.get_median_node_id();
            let t1_postord_node_ids = t1.postord_ids(t1.get_root_id()).collect_vec();
            let t2_postord_node_ids = t2.postord_ids(t2.get_root_id()).collect_vec();

            let b: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
            t1.get_cluster_ids(t1_median)
                .filter_map(|x| t1.get_node_taxa_cloned(x))
                .filter(|x| taxa_set.contains(x))
            );
            let b_hat: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
                t2.get_cluster_ids(t2_median)
                    .filter_map(|x| t2.get_node_taxa_cloned(x))
                    .filter(|x| taxa_set.contains(x))
            );

            let a: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t1.get_leaf_ids().map(|x| t1.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect();
            let a_hat: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t2.get_leaf_ids().map(|x| t2.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b_hat)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect(); 

            let a_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&a_hat).map(|x| x.clone()).collect();
            let a_int_b_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&b_hat).map(|x| x.clone()).collect();
            let b_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = b.intersection(&a_hat).map(|x| x.clone()).collect();

            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);

            let t1_lower_set: HashSet<_> = t1.postord_ids(t1_median).collect();
            let t1_lower_node_ids_postord = t1.postord_ids(t1_median).collect_vec();
            let t1_upper_node_ids_postord = t1_postord_node_ids.iter().filter(|x| !t1_lower_set.contains(x))
            .map(|x| x.clone())
            .collect_vec();
    
            let t2_lower_set: HashSet<_> = t2.postord_ids(t2_median).collect();
            let t2_lower_node_ids_postord = t2.postord_ids(t2_median).collect_vec();
            let t2_upper_node_ids_postord = t2_postord_node_ids.iter().filter(|x| !t2_lower_set.contains(x))
            .map(|x| x.clone())
            .collect_vec();

            let pt = DemoTree::pascal_triangle(1);

            
            (t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, a_int_a_hat, a_int_b_hat, b_int_a_hat, a, b, a_hat, b_hat)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, a_int_a_hat, a_int_b_hat, b_int_a_hat, a, b, a_hat, b_hat)| {
            let mut t1_node_attributes = t1.tree_attributes(1);
            let mut t2_node_attributes = t2.tree_attributes(1);

            DemoTree::distance_single_mix_type(t1, t2, t1_lca, t2_lca, &pt, 1, t1_median, t2_median, a, b, a_hat, b_hat, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, &mut t1_node_attributes, &mut t2_node_attributes, &a_int_a_hat, &a_int_b_hat, &b_int_a_hat);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_nlcd_single_mix_even(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(taxa_size);
            let mut t2 = DemoTree::yule(taxa_size);
            let binding1 = t1
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let binding2 = t2
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let taxa_set: HashSet<_> = binding1.intersection(&binding2).map(|x| x.clone().clone()).collect();
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_median = t1.get_median_node_id();
            let t2_median = t2.get_median_node_id();
            let t1_postord_node_ids = t1.postord_ids(t1.get_root_id()).collect_vec();
            let t2_postord_node_ids = t2.postord_ids(t2.get_root_id()).collect_vec();

            let b: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
            t1.get_cluster_ids(t1_median)
                .filter_map(|x| t1.get_node_taxa_cloned(x))
                .filter(|x| taxa_set.contains(x))
            );
            let b_hat: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
                t2.get_cluster_ids(t2_median)
                    .filter_map(|x| t2.get_node_taxa_cloned(x))
                    .filter(|x| taxa_set.contains(x))
            );

            let a: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t1.get_leaf_ids().map(|x| t1.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect();
            let a_hat: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t2.get_leaf_ids().map(|x| t2.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b_hat)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect(); 

            let a_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&a_hat).map(|x| x.clone()).collect();
            let a_int_b_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&b_hat).map(|x| x.clone()).collect();
            let b_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = b.intersection(&a_hat).map(|x| x.clone()).collect();

            
            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);

            let t1_lower_set: HashSet<_> = t1.postord_ids(t1_median).collect();
            let t1_lower_node_ids_postord = t1.postord_ids(t1_median).collect_vec();
            let t1_upper_node_ids_postord = t1_postord_node_ids.iter().filter(|x| !t1_lower_set.contains(x))
            .map(|x| x.clone())
            .collect_vec();
    
            let t2_lower_set: HashSet<_> = t2.postord_ids(t2_median).collect();
            let t2_lower_node_ids_postord = t2.postord_ids(t2_median).collect_vec();
            let t2_upper_node_ids_postord = t2_postord_node_ids.iter().filter(|x| !t2_lower_set.contains(x))
            .map(|x| x.clone())
            .collect_vec();

            let pt = DemoTree::pascal_triangle(2);

            
            (t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, a_int_a_hat, a_int_b_hat, b_int_a_hat, a, b, a_hat, b_hat)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, a_int_a_hat, a_int_b_hat, b_int_a_hat, a, b, a_hat, b_hat)| {
            let mut t1_node_attributes = t1.tree_attributes(3);
            let mut t2_node_attributes = t2.tree_attributes(3);

            DemoTree::distance_single_mix_type(t1, t2, t1_lca, t2_lca, &pt, 2, t1_median, t2_median, a, b, a_hat, b_hat, t1_lower_node_ids_postord, t1_upper_node_ids_postord, t2_lower_node_ids_postord, t2_upper_node_ids_postord, &mut t1_node_attributes, &mut t2_node_attributes, &a_int_a_hat, &a_int_b_hat, &b_int_a_hat);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_nlcd_double_mix(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            fn depth(
                tree: &DemoTree,
                node_id:  <<DemoTree as RootedTree>::Node as RootedTreeNode>::NodeID,
            ) -> f32 {
                EulerWalk::get_node_depth(tree, node_id) as f32
            }

            let mut t1 = DemoTree::yule(taxa_size);
            let mut t2 = DemoTree::yule(taxa_size);
            let binding1 = t1
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let binding2 = t2
                .get_taxa_space()
                .collect::<HashSet<&TreeNodeMeta<DemoTree>>>();
            let taxa_set: HashSet<_> = binding1.intersection(&binding2).map(|x| x.clone().clone()).collect();
            t1.precompute_constant_time_lca();
            t2.precompute_constant_time_lca();
            t1.set_zeta(depth);
            t2.set_zeta(depth);
            let t1_median = t1.get_median_node_id();
            let t2_median = t2.get_median_node_id();

            let b: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
            t1.get_cluster_ids(t1_median)
                .filter_map(|x| t1.get_node_taxa_cloned(x))
                .filter(|x| taxa_set.contains(x))
            );
            let b_hat: HashSet<TreeNodeMeta<DemoTree>> = HashSet::from_iter(
                t2.get_cluster_ids(t2_median)
                    .filter_map(|x| t2.get_node_taxa_cloned(x))
                    .filter(|x| taxa_set.contains(x))
            );

            let a: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t1.get_leaf_ids().map(|x| t1.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect();
            let a_hat: HashSet<TreeNodeMeta<DemoTree>> =
                HashSet::from_iter(t2.get_leaf_ids().map(|x| t2.get_node_taxa_cloned(x).unwrap()))
                    .difference(&b_hat)
                    .filter(|x| taxa_set.contains(x.clone()))
                    .cloned()
                    .collect(); 

            let a_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&a_hat).map(|x| x.clone()).collect();
            let a_int_b_hat: HashSet<TreeNodeMeta<DemoTree>> = a.intersection(&b_hat).map(|x| x.clone()).collect();
            let b_int_a_hat: HashSet<TreeNodeMeta<DemoTree>> = b.intersection(&a_hat).map(|x| x.clone()).collect();
            let b_int_b_hat: HashSet<TreeNodeMeta<DemoTree>> = b.intersection(&b_hat).map(|x| x.clone()).collect();

            let t1_lca = LcaMap::from_tree(&t1);
            let t2_lca = LcaMap::from_tree(&t2);

            let pt = DemoTree::pascal_triangle(4);

            (t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, a_int_a_hat, a_int_b_hat, b_int_a_hat, b_int_b_hat)
        })
        .bench_refs(|(t1, t2, t1_lca, t2_lca, pt, t1_median, t2_median, a_int_a_hat, a_int_b_hat, b_int_a_hat, b_int_b_hat)| {
            DemoTree::distance_double_mix_type(t1, t2, t1_lca, t2_lca, &pt, 4, t1_median, t2_median, a_int_a_hat, a_int_b_hat, b_int_a_hat, b_int_b_hat);
        });
}

#[divan::bench(args = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000, 6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000])]
fn benchmark_constant_time_lca(bencher: divan::Bencher, taxa_size: usize) {
    bencher
        .with_inputs(|| {
            let mut tree = DemoTree::yule(taxa_size);
            tree.precompute_constant_time_lca();
            let lca_map = LcaMap::from_tree(&tree);
            let leaves = (10, 20);
            (lca_map, leaves)
        })
        .bench_refs(|(lca_map, leaves)| {
            let _ = lca_map.get_lca(leaves.1, leaves.0);
        });
}